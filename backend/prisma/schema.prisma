// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sectors {
  name           String           @id
  slug           String           @default("")
  createdAt      DateTime         @default(now()) @updatedAt
  workstations   Workstations[]
  Paths          Paths[]
  DefectivePaths DefectivePaths[]

  @@map("sectors")
}

model Workstations {
  id             Int              @id @default(autoincrement())
  description    String
  qrcode         String           @unique
  type           String
  sectorName     String
  createdAt      DateTime         @default(now()) @updatedAt
  Paths          Paths[]
  DefectivePaths DefectivePaths[]

  sector Sectors @relation(fields: [sectorName], references: [name])

  @@map("workstations")
}

model Users {
  id           String   @id @default(uuid())
  name         String
  surname      String
  password     String
  avatar       String?
  email        String   @unique
  isSupervisor Boolean  @default(false)
  createdAt    DateTime @default(now()) @updatedAt

  @@map("users")
}

model Products {
  SN        String   @id
  createdAt DateTime @default(now()) @updatedAt
  Paths     Paths[]

  @@map("products")
}

model DefectiveProducts {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now()) @updatedAt
  DefectivePaths DefectivePaths[]

  @@map("defective_products")
}

model Trays {
  id        Int      @id @default(autoincrement())
  qrcode    String   @unique
  createdAt DateTime @default(now()) @updatedAt

  @@map("trays")
}

model Paths {
  sectorName   String
  stationId    Int
  prodSN       String
  registeredAt DateTime? @default(now()) @updatedAt

  workStation Workstations @relation(fields: [stationId], references: [id])
  product     Products     @relation(fields: [prodSN], references: [SN])
  sector      Sectors      @relation(fields: [sectorName], references: [name])

  @@id([stationId, prodSN, sectorName])
  @@map("paths")
}

model DefectivePaths {
  sectorName   String
  stationId    Int
  defProdId    Int
  registeredAt DateTime? @default(now()) @updatedAt

  workStation      Workstations      @relation(fields: [stationId], references: [id])
  defectiveProduct DefectiveProducts @relation(fields: [defProdId], references: [id])
  sector           Sectors           @relation(fields: [sectorName], references: [name])

  @@id([stationId, defProdId, sectorName])
  @@map("defective_paths")
}
